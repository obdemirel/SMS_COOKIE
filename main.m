clear all
addpath utils
for subjectnos = [10];
    subjectnos
    global gui_on; gui_on = 0;
    global par_on; par_on = 1; %parpool(4); %parpool(maxNumCompThreads)


    %loading the k-space,acs region and sensitiviy maps
    cd data
    loadname1 = strcat('s',num2str(subjectnos),'_acs');
    load(loadname1);
    loadname1 = strcat('s',num2str(subjectnos),'_kspace');
    load(loadname1);
    cd ..
    %data tag for saving
    data_tag = strcat('s',num2str(subjectnos),'_t1_map');

    kspace = squeeze(kspace(:,:,:,:)); kspace = kspace./1e4; %kspace = kspace./max(abs(kspace(:)));
    % this data is fully sampled in phase-encode, to make it in-plane
    % acceleration R=2, with 24 ACS lines, following lines are used
    dumdum = kspace;
    kspace(:,2:2:end,:,:)= 0;
    kspace(:,61:89,:,:)= dumdum(:,61:89,:,:);
    %%%%


    slice_R = size(acs,4); PE_R = 2 ; center_region=1; center_locs = [29,160,65,89]; %center_locs define where the ACS regions is, used in split slice-GRAPPA

    %fov shifts for each slice, fov_amount is FOV/(.)
    %Example for FOV/3 shifts for a SMS 5 study: [0*FOV/3,-1*FOV/3,-2*FOV/3,0*FOV/3,-1FOV/3]
    fov_shifts = [0 -1 -2 0 -1]; fov_amount = 3;

    %%%% RECONSTRUCTION MENU %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    espirit_generation = 1; %leave 0 if sense_maps are already generated
    maps_are_there = 0; %if there is already a sense_maps.mat to load or generated by the above option
    CAIPI_shifting = 0; %If acs comes without CAIPI shifts open this to apply CAIPI shifts
    spsg_recon = 1; % Split Slice-GRAPPA Reconstruction
    sms_cookie_recon = 1; % SMS-COOKIE Reconstruction
    sms_cookie_reg_recon = 1; % Regularized SMS-COOKIE Reconstruction
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %to see what the data looks like
    figure, imshow(rssq_fun(ifft2c(kspace(:,:,:,1))),[]), title('Input') %%just showing what the input looks like!


    disp('#########################')
    disp('Before starting check these:')
    disp(['Slice R: ',num2str(slice_R)])
    disp(['PE R: ',num2str(PE_R)])
    disp(['Center: ',num2str(center_region)])
    disp(['Center Locations: ',num2str(center_locs)])
    disp(['CAIPI shift: ',num2str(CAIPI_shifting)])
    disp('######################### Press a key to continue!')
    %pause()

    save_name = strcat(data_tag,'_SMS',num2str(slice_R),'xR',num2str(PE_R));
    % The acs comes with the input data already has FOV shifts, incase it does
    % not, please use the following lines
    %CAIPI shifting%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if(CAIPI_shifting==1)
        cd caipi_shift
        acs = shifter_caipi_acs(acs,fov_shifts,fov_amount); %% for acs
        cd ..
    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    %input data comes with sensitiviy maps, if not please use the following
    %ESPIRiT map generation%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if(espirit_generation==1)
        cd ESPIRiT_original
        sense_maps = espirit_generator(kspace,acs,24,[6,6],0.02);
        cd ..

        % Plotting part - not so well written
        maps_all = [];
        for ii = 1:size(acs,4)
            maps_all = [maps_all;squeeze(sense_maps(:,:,10,ii)).'];
        end
        %     cat(2,squeeze(sense_maps(:,:,10,1)),squeeze(sense_maps(:,:,10,2)),squeeze(sense_maps(:,:,10,3))...
        %         ,squeeze(sense_maps(:,:,10,4)),squeeze(sense_maps(:,:,1,5)));
        figure, imshow(abs(maps_all).',[]), title('Abs of 10th Coil of all Slices')
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


    %SPSG Reconstruction%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    if(spsg_recon==1)
        cd spsg
        [m,n,no_c,ims]= size(kspace);

        disp('SpSg Kernels are processing...')
        tic
        [data_ak_ind,kernel_r,kernel_c] = sg_kernel_main_sp(slice_R,PE_R,kspace,acs,[5,5],gui_on,par_on);
        toc

        if(center_region ==1)
            tic
            [data_ak_small,kernel_rs,kernel_cs] = sg_kernel_mini_sp(slice_R,PE_R,kspace,acs,[5,5],gui_on,par_on);
            toc
        end
        disp('SpSg Kernels are Ready!')

        %slice seperation
        disp('SpSg 1st Part is processing...')
        tic
        if(center_region ==0)
            data_ak_small = 0; kernel_rs = 0; kernel_cs = 0;
        end
        sgrecon = sg_rec(slice_R,PE_R,ims,data_ak_ind,kernel_r,kernel_c,kspace,center_locs,data_ak_small,kernel_rs,kernel_cs,center_region,gui_on,par_on);
        toc
        disp('SpSg 1st Part is Ready!')

        %in-plane seperation
        disp('SpSg 2nd Part is processing...')
        tic
        if(PE_R==1)
            finalrecon = permute(sgrecon,[4 1 2 3 5]);
        else
            finalrecon = sg_fin(slice_R,PE_R,ims,sgrecon,acs,kspace,[5,4],gui_on,par_on);
            toc
            disp('SpSg 2nd Part is Ready!')
        end

        %     finalrecon(:,:,114:end,:,:) = 0;
        %     finalrecon(:,1:28,:,:,:) = 0;

        tic
        [sense1_images] = sense1_maker(finalrecon,sense_maps,ims);
        toc

        cd ..
        spsg_res_all = sense1_images;

        % Plotting part - not so well written, just to see what the recon
        % looks like
        for dyn_c = 2;%:size(sense1_images,4)
            spsg_all_mid = [];
            for asd = 1:size(acs,4)
                spsg_all_mid = [spsg_all_mid ones(size(sense1_images,1)/1,1)*max(abs(sense1_images(:))) sense1_images(:,:,asd,dyn_c)];
            end
            spsg_all(:,:,dyn_c) = spsg_all_mid;
        end
        figure, imshow(abs(spsg_all_mid),[0 max(abs(spsg_all_mid(:)))/10]), title('SPSG Result')
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    end
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




    %SMS COOKIE and Regularized SMS COOKIE Reconstruction%%%%%%%%%%%%%%%%%%%%%%
    if(sms_cookie_recon==1 || sms_cookie_reg_recon ==1)
        cd sms_cookie

        disp('SMS kernels are processing...')
        [data_kspace,kernel_set,kernel_r,kernel_s] = SMS_SPIRIT_kernel(kspace,acs,[7,7],slice_R,gui_on,par_on);
        disp('SMS kernels are ready!')
        cd ..


        if(sms_cookie_recon==1)

            cd sms_cookie
            disp('SMS-COOKIE is processing...')
            % SMS-COOKIE Reconstruction %%% starting should be 1,1
            spsg_initial = finalrecon;
            %removing SPSG unneccesary filling in k-space due the border
            %processes
            spsg_initial(:,:,114:end,:,:) = 0;
            spsg_initial(:,1:28,:,:,:) = 0;
            [recon_images,recon] = SMS_COOKIE(7.5e-3,1,spsg_initial,data_kspace,sense_maps,kernel_set,kernel_r,kernel_s,slice_R,40,gui_on,par_on);
            sms_cookie_res_all = recon_images;
            cd ..


            % Plotting part - not so well written
            for dyn_c = 2;%:size(sms_cookie_res_all,4)
                cookie_all_mid = [];
                for asd = 1:size(acs,4)
                    cookie_all_mid = [cookie_all_mid ones(size(sms_cookie_res_all,1)/1,1)*max(abs(sms_cookie_res_all(:))) sms_cookie_res_all(:,:,asd,dyn_c)];
                end
                cookie_all(:,:,dyn_c) = cookie_all_mid;
            end
            figure, imshow(abs(cookie_all_mid),[0 max(abs(cookie_all_mid(:)))/10]), title('SMS-COOKIE Result')
        end

        if(sms_cookie_reg_recon==1)
            cd sms_cookie_llr
            disp('Regularized SMS-COOKIE is processing...')
            % SMS-COOKIE Reconstruction %%% starting should be 1,1
            spsg_initial = finalrecon; %7.5e-3
            [recon_reg_images,reg_recon] = SMS_COOKIE_reg(0.08,7.5e-3,1,spsg_initial,data_kspace,sense_maps,kernel_set,kernel_r,kernel_s,slice_R,5,5,gui_on,par_on);
            sms_cookie_reg_res_all = recon_reg_images;
            cd ..

            for dyn_c = 2;%:size(sms_spirit_res_all,4)
                sms_all_mid = [];
                for asd = 1:size(acs,4)
                    sms_all_mid = [sms_all_mid ones(size(sms_cookie_reg_res_all,1)/1,1)*max(abs(sms_cookie_reg_res_all(:))) sms_cookie_reg_res_all(:,:,asd,dyn_c)];
                end
                cookie_all(:,:,dyn_c) = sms_all_mid;
            end
            figure, imshow(abs(sms_all_mid),[0 max(abs(sms_all_mid(:)))/10]), title('Regularized SMS-COOKIE Result')

        end





    end

end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
